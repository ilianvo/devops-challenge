name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the Docker image (e.g., v1.0.0)'
        required: false
        default: ''

jobs:
  build-and-push:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine version tag
        id: version
        run: |
          # If version is provided via workflow_dispatch, use it
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get tags from Docker Hub
          TAGS=$(curl -s "https://hub.docker.com/v2/namespaces/${{ secrets.DOCKERHUB_USERNAME }}/repositories/notify-deploy/tags?page_size=100" | jq -r '.results[].name')
          
          # Filter for semantic version tags (vX.Y.Z)
          LATEST_TAG=$(echo "$TAGS" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            # No valid tags found, start with v1.0.0
            NEW_VERSION="v1.0.0"
          else
            # Extract major, minor, patch from vX.Y.Z
            MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1 | cut -c2-)
            MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
            PATCH=$(echo "$LATEST_TAG" | cut -d. -f3)
            # Increment patch version
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
          fi
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $NEW_VERSION"

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/notify-deploy:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/notify-deploy:${{ steps.version.outputs.version }}
